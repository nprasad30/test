import streamlit as st
import boto3

bedrock_agent_runtime = boto3.client('bedrock-agent-runtime')

AGENT_ID = 'your-agent-id'  # Replace with your actual Agent ID
AGENT_ALIAS_ID = 'your-agent-alias-id'  # Replace with your actual Agent Alias ID

def invoke_agent(input_text):
    try:
        st.write("Sending to agent:", input_text)  # Debug output
        response = bedrock_agent_runtime.invoke_agent(
            agentId=AGENT_ID,
            agentAliasId=AGENT_ALIAS_ID,
            sessionId='recruitment-session',
            inputText=input_text
        )
        
        # Process the EventStream
        event_stream = response['completion']
        full_response = ""
        for event in event_stream:
            if 'chunk' in event:
                chunk = event['chunk']
                if 'bytes' in chunk:
                    full_response += chunk['bytes'].decode('utf-8')
        
        st.write("Raw response from agent:", full_response)  # Debug output
        return full_response.strip()
    except Exception as e:
        st.error(f"Error invoking agent: {str(e)}")
        return None

def main():
    st.title('AI Recruitment Assistant')

    task = st.selectbox('Select Task', ['Generate Job Description', 'Generate Interview Questions', 'General Recruitment Query'])

    query = st.text_area('Enter your query', height=200, 
                         help="For best results, include relevant details such as job title, company name, and key responsibilities in your query.")

    if st.button('Submit Query'):
        if task == 'Generate Job Description':
            prompt = f"Task: Generate a detailed job description based on the following information:\n\n{query}"
        elif task == 'Generate Interview Questions':
            prompt = f"Task: Generate a set of relevant interview questions based on the following job information:\n\n{query}"
        else:  # General Recruitment Query
            prompt = f"Task: Assist with the following recruitment query:\n\n{query}"

        result = invoke_agent(prompt)
        if result:
            st.markdown("### AI Assistant Response:")
            st.markdown(result)

if __name__ == "__main__":
    main()
